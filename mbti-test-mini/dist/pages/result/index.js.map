{"version":3,"file":"pages/result/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;AC3IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://mbti-test-mini/./src/pages/result/index.tsx?2280","webpack://mbti-test-mini/._src_pages_result_index.tsx","webpack://mbti-test-mini/._src_utils_bizUtils.ts","webpack://mbti-test-mini/._node_modules_@babel_runtime_helpers_esm_createForOfIteratorHelper.js"],"sourcesContent":["import { View, Image } from \"@tarojs/components\";\nimport { AtButton } from \"taro-ui\";\nimport Taro from \"@tarojs/taro\";\nimport headerBg from \"../../assets/headerBg.jpg\";\nimport GlobalFooter from \"../../components/GlobalFooter\";\nimport { getBestQuestionResult } from \"../../utils/bizUtils\";\nimport questions from \"../../data/questions.json\";\nimport questionResults from \"../../data/question_results.json\";\nimport \"./index.scss\";\n\n/**\n * 测试结果页面\n */\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default (function () {\n  // 获取答案\n  var answerList = Taro.getStorageSync(\"answerList\");\n  if (!answerList || answerList.length < 1) {\n    Taro.showToast({\n      title: \"答案为空\",\n      icon: \"error\",\n      duration: 3000\n    });\n  }\n  // 获取测试结果\n  var result = getBestQuestionResult(answerList, questions, questionResults);\n  return /*#__PURE__*/_jsxs(View, {\n    className: \"resultPage\",\n    children: [/*#__PURE__*/_jsx(View, {\n      className: \"at-article__h1 title\",\n      children: result.resultName\n    }), /*#__PURE__*/_jsx(View, {\n      className: \"at-article__h2 subTitle\",\n      children: result.resultDesc\n    }), /*#__PURE__*/_jsx(AtButton, {\n      type: \"primary\",\n      circle: true,\n      className: \"enterBtn\",\n      onClick: function onClick() {\n        Taro.reLaunch({\n          url: \"/pages/index/index\"\n        });\n      },\n      children: \"\\u8FD4\\u56DE\\u4E3B\\u9875\"\n    }), /*#__PURE__*/_jsx(Image, {\n      className: \"headerBg\",\n      src: headerBg\n    }), /*#__PURE__*/_jsx(GlobalFooter, {})]\n  });\n});","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"!!../../../node_modules/@tarojs/taro-loader/lib/entry-cache.js?name=pages/result/index!./index.tsx\"\nvar config = {\"navigationBarTitleText\":\"查看结果\"};\n\n\nvar inst = Page(createPageConfig(component, 'pages/result/index', {root:{cn:[]}}, config || {}))\n\n\nexport default component\n","/**\n * 获取最佳题目评分结果\n * @param answerList\n * @param questions\n * @param question_results\n */\n\nexport function getBestQuestionResult(answerList, questions, question_results) {\n  // 初始化一个对象，用于存储每个选项的计数\n  const optionCount = {};\n\n  // 用户选择 A, B, C\n  // 对应 result：I, I, J\n  // optionCount[I] = 2; optionCount[J] = 1\n\n  // 遍历题目列表\n  for (const question of questions) {\n    // 遍历答案列表\n    for (const answer of answerList) {\n      // 遍历题目中的选项\n      for (const option of question.options) {\n        // 如果答案和选项的key匹配\n        if (option.key === answer) {\n          // 获取选项的result属性\n          const result = option.result;\n\n          // 如果result属性不在optionCount中，初始化为0\n          if (!optionCount[result]) {\n            optionCount[result] = 0;\n          }\n\n          // 在optionCount中增加计数\n          optionCount[result]++;\n        }\n      }\n    }\n  }\n\n  // 初始化最高分数和最高分数对应的评分结果\n  let maxScore = 0;\n  let maxScoreResult = question_results[0];\n\n  // 遍历评分结果列表\n  for (const result of question_results) {\n    // 计算当前评分结果的分数\n    const score = result.resultProp.reduce((count, prop) => {\n      return count + (optionCount[prop] || 0);\n    }, 0);\n\n    // 如果分数高于当前最高分数，更新最高分数和最高分数对应的评分结果\n    if (score > maxScore) {\n      maxScore = score;\n      maxScoreResult = result;\n    }\n  }\n\n  // 返回最高分数和最高分数对应的评分结果\n  return maxScoreResult;\n}\n\n// 示例数据\nconst answerList = [\"B\",\"B\",\"B\",\"A\"];\nconst questions = [\n  {\n    title: \"你通常更喜欢\",\n    options: [\n      {\n        result: \"I\",\n        value: \"独自工作\",\n        key: \"A\",\n      },\n      {\n        result: \"E\",\n        value: \"与他人合作\",\n        key: \"B\",\n      },\n    ],\n  },\n  {\n    options: [\n      {\n        result: \"S\",\n        value: \"喜欢有结构和常规\",\n        key: \"A\",\n      },\n      {\n        result: \"N\",\n        value: \"喜欢自由和灵活性\",\n        key: \"B\",\n      },\n    ],\n    title: \"对于日常安排\",\n  },\n  {\n    options: [\n      {\n        result: \"P\",\n        value: \"首先考虑可能性\",\n        key: \"A\",\n      },\n      {\n        result: \"J\",\n        value: \"首先考虑后果\",\n        key: \"B\",\n      },\n    ],\n    title: \"当遇到问题时\",\n  },\n  {\n    options: [\n      {\n        result: \"T\",\n        value: \"时间是一种宝贵的资源\",\n        key: \"A\",\n      },\n      {\n        result: \"F\",\n        value: \"时间是相对灵活的概念\",\n        key: \"B\",\n      },\n    ],\n    title: \"你如何看待时间\",\n  },\n];\nconst question_results = [\n  {\n    resultProp: [\"I\", \"S\", \"T\", \"J\"],\n    resultDesc: \"忠诚可靠，被公认为务实，注重细节。\",\n    resultPicture: \"icon_url_istj\",\n    resultName: \"ISTJ（物流师）\",\n  },\n  {\n    resultProp: [\"I\", \"S\", \"F\", \"J\"],\n    resultDesc: \"善良贴心，以同情心和责任为特点。\",\n    resultPicture: \"icon_url_isfj\",\n    resultName: \"ISFJ（守护者）\",\n  },\n];\n\nconsole.log(getBestQuestionResult(answerList, questions, question_results));\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":[],"sourceRoot":""}